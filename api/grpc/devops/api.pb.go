// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package devops is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	DNSRecordRequest
	Status
*/
package devops

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DNSRecordRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *DNSRecordRequest) Reset()                    { *m = DNSRecordRequest{} }
func (m *DNSRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*DNSRecordRequest) ProtoMessage()               {}
func (*DNSRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DNSRecordRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type Status struct {
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*DNSRecordRequest)(nil), "devops.DNSRecordRequest")
	proto.RegisterType((*Status)(nil), "devops.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DNSRecord service

type DNSRecordClient interface {
	Add(ctx context.Context, in *DNSRecordRequest, opts ...grpc.CallOption) (*Status, error)
	Delete(ctx context.Context, in *DNSRecordRequest, opts ...grpc.CallOption) (*Status, error)
	Update(ctx context.Context, in *DNSRecordRequest, opts ...grpc.CallOption) (*Status, error)
}

type dNSRecordClient struct {
	cc *grpc.ClientConn
}

func NewDNSRecordClient(cc *grpc.ClientConn) DNSRecordClient {
	return &dNSRecordClient{cc}
}

func (c *dNSRecordClient) Add(ctx context.Context, in *DNSRecordRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/devops.DNSRecord/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSRecordClient) Delete(ctx context.Context, in *DNSRecordRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/devops.DNSRecord/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSRecordClient) Update(ctx context.Context, in *DNSRecordRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/devops.DNSRecord/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DNSRecord service

type DNSRecordServer interface {
	Add(context.Context, *DNSRecordRequest) (*Status, error)
	Delete(context.Context, *DNSRecordRequest) (*Status, error)
	Update(context.Context, *DNSRecordRequest) (*Status, error)
}

func RegisterDNSRecordServer(s *grpc.Server, srv DNSRecordServer) {
	s.RegisterService(&_DNSRecord_serviceDesc, srv)
}

func _DNSRecord_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSRecordServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devops.DNSRecord/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSRecordServer).Add(ctx, req.(*DNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSRecord_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSRecordServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devops.DNSRecord/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSRecordServer).Delete(ctx, req.(*DNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSRecord_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSRecordServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devops.DNSRecord/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSRecordServer).Update(ctx, req.(*DNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNSRecord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devops.DNSRecord",
	HandlerType: (*DNSRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DNSRecord_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DNSRecord_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DNSRecord_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x49, 0x2d, 0xcb, 0x2f, 0x28, 0x56, 0x52, 0xe2,
	0x12, 0x70, 0xf1, 0x0b, 0x0e, 0x4a, 0x4d, 0xce, 0x2f, 0x4a, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x2c, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca,
	0x2c, 0x50, 0xe2, 0xe0, 0x62, 0x0b, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x36, 0x5a, 0xc2, 0xc8, 0xc5,
	0x09, 0x57, 0x2e, 0xa4, 0xcf, 0xc5, 0xec, 0x98, 0x92, 0x22, 0x24, 0xa1, 0x07, 0x31, 0x4b, 0x0f,
	0xdd, 0x20, 0x29, 0x3e, 0x98, 0x0c, 0x44, 0xbb, 0x90, 0x11, 0x17, 0x9b, 0x4b, 0x6a, 0x4e, 0x6a,
	0x49, 0x2a, 0x69, 0x7a, 0x42, 0x0b, 0x52, 0x12, 0x49, 0xd1, 0xe3, 0xa4, 0xc5, 0x25, 0x93, 0x95,
	0x5a, 0x5c, 0x9c, 0x56, 0x94, 0x58, 0xa5, 0x97, 0x6d, 0x51, 0xac, 0x9b, 0x98, 0x5d, 0xac, 0x9b,
	0x92, 0x57, 0xac, 0x9b, 0x99, 0x97, 0x5e, 0x94, 0x5a, 0x5c, 0xec, 0xc4, 0xe6, 0x02, 0x56, 0xee,
	0xc1, 0x18, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x0f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b,
	0x5f, 0xb3, 0xac, 0x1c, 0x01, 0x00, 0x00,
}
