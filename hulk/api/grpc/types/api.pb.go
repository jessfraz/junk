// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	StartJobRequest
	StartJobResponse
	DeleteJobRequest
	DeleteJobResponse
	ListJobsRequest
	Job
	ListJobsResponse
	StateRequest
	StateResponse
	LogsRequest
	Log
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type StartJobRequest struct {
	Name           string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Args           []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	Artifacts      string   `protobuf:"bytes,3,opt,name=artifacts" json:"artifacts,omitempty"`
	EmailRecipient string   `protobuf:"bytes,4,opt,name=emailRecipient" json:"emailRecipient,omitempty"`
}

func (m *StartJobRequest) Reset()                    { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string            { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()               {}
func (*StartJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StartJobResponse struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *StartJobResponse) Reset()                    { *m = StartJobResponse{} }
func (m *StartJobResponse) String() string            { return proto.CompactTextString(m) }
func (*StartJobResponse) ProtoMessage()               {}
func (*StartJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeleteJobRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteJobRequest) Reset()                    { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()               {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DeleteJobResponse struct {
}

func (m *DeleteJobResponse) Reset()                    { *m = DeleteJobResponse{} }
func (m *DeleteJobResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobResponse) ProtoMessage()               {}
func (*DeleteJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListJobsRequest struct {
}

func (m *ListJobsRequest) Reset()                    { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()               {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Job struct {
	Id             uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Args           []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	Artifacts      string   `protobuf:"bytes,4,opt,name=artifacts" json:"artifacts,omitempty"`
	Status         string   `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	EmailRecipient string   `protobuf:"bytes,6,opt,name=emailRecipient" json:"emailRecipient,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ListJobsResponse struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *ListJobsResponse) Reset()                    { *m = ListJobsResponse{} }
func (m *ListJobsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListJobsResponse) ProtoMessage()               {}
func (*ListJobsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListJobsResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type StateRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *StateRequest) Reset()                    { *m = StateRequest{} }
func (m *StateRequest) String() string            { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()               {}
func (*StateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StateResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *StateResponse) Reset()                    { *m = StateResponse{} }
func (m *StateResponse) String() string            { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()               {}
func (*StateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type LogsRequest struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Follow bool   `protobuf:"varint,2,opt,name=follow" json:"follow,omitempty"`
}

func (m *LogsRequest) Reset()                    { *m = LogsRequest{} }
func (m *LogsRequest) String() string            { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()               {}
func (*LogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Log struct {
	Log string `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*StartJobRequest)(nil), "types.StartJobRequest")
	proto.RegisterType((*StartJobResponse)(nil), "types.StartJobResponse")
	proto.RegisterType((*DeleteJobRequest)(nil), "types.DeleteJobRequest")
	proto.RegisterType((*DeleteJobResponse)(nil), "types.DeleteJobResponse")
	proto.RegisterType((*ListJobsRequest)(nil), "types.ListJobsRequest")
	proto.RegisterType((*Job)(nil), "types.Job")
	proto.RegisterType((*ListJobsResponse)(nil), "types.ListJobsResponse")
	proto.RegisterType((*StateRequest)(nil), "types.StateRequest")
	proto.RegisterType((*StateResponse)(nil), "types.StateResponse")
	proto.RegisterType((*LogsRequest)(nil), "types.LogsRequest")
	proto.RegisterType((*Log)(nil), "types.Log")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (API_LogsClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := grpc.Invoke(ctx, "/types.API/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	out := new(DeleteJobResponse)
	err := grpc.Invoke(ctx, "/types.API/DeleteJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := grpc.Invoke(ctx, "/types.API/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := grpc.Invoke(ctx, "/types.API/State", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (API_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/types.API/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPILogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_LogsClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type aPILogsClient struct {
	grpc.ClientStream
}

func (x *aPILogsClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for API service

type APIServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	State(context.Context, *StateRequest) (*StateResponse, error)
	Logs(*LogsRequest, API_LogsServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).StartJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).DeleteJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListJobs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).State(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Logs(m, &aPILogsServer{stream})
}

type API_LogsServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type aPILogsServer struct {
	grpc.ServerStream
}

func (x *aPILogsServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _API_StartJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _API_DeleteJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _API_ListJobs_Handler,
		},
		{
			MethodName: "State",
			Handler:    _API_State_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _API_Logs_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xe2, 0x30,
	0x10, 0x26, 0x71, 0x40, 0x30, 0x2c, 0x7f, 0x66, 0x05, 0x51, 0xb4, 0x42, 0xc8, 0x87, 0x5d, 0xb4,
	0x07, 0x54, 0xd1, 0xf6, 0x58, 0xa9, 0x95, 0x7a, 0x69, 0xc5, 0xa1, 0x4a, 0x9f, 0x20, 0x50, 0x83,
	0x52, 0x05, 0x9c, 0xc6, 0x46, 0x55, 0x4f, 0x7d, 0x90, 0x3e, 0x40, 0x5f, 0xb3, 0xb6, 0xeb, 0x24,
	0xd4, 0xc0, 0x6d, 0xe6, 0xf3, 0xcc, 0x97, 0x6f, 0xbe, 0x99, 0x40, 0x23, 0x4a, 0xe3, 0x69, 0x9a,
	0x31, 0xc1, 0x70, 0x55, 0xbc, 0xa5, 0x94, 0x93, 0x77, 0xe8, 0x3c, 0x8a, 0x28, 0x13, 0xf7, 0x6c,
	0x11, 0xd2, 0x97, 0x1d, 0xe5, 0x02, 0x63, 0xf0, 0xb6, 0xd1, 0x86, 0xfa, 0xce, 0xd8, 0x99, 0x34,
	0x42, 0x1d, 0x2b, 0x2c, 0xca, 0xd6, 0xdc, 0x77, 0xc7, 0x48, 0x61, 0x2a, 0xc6, 0x7f, 0x24, 0x5d,
	0x26, 0xe2, 0x55, 0xb4, 0x14, 0xdc, 0x47, 0xba, 0xb8, 0x04, 0xf0, 0x5f, 0x68, 0xd3, 0x4d, 0x14,
	0x27, 0x21, 0x5d, 0xc6, 0x69, 0x4c, 0xb7, 0xc2, 0xf7, 0x74, 0x89, 0x85, 0x12, 0x02, 0xdd, 0x52,
	0x00, 0x4f, 0xd9, 0x96, 0x53, 0xdc, 0x06, 0x37, 0x7e, 0xd2, 0xdf, 0x6f, 0x85, 0x32, 0x52, 0x35,
	0xb7, 0x34, 0xa1, 0x82, 0xee, 0xa9, 0xb4, 0x6b, 0xfa, 0xd0, 0xdb, 0xab, 0xf9, 0x26, 0x22, 0x3d,
	0xe8, 0xcc, 0x63, 0xae, 0xb8, 0xb9, 0xe9, 0x23, 0x1f, 0x0e, 0x20, 0x99, 0xdb, 0xfd, 0xc5, 0xd4,
	0xee, 0x91, 0xa9, 0xd1, 0xa9, 0xa9, 0x3d, 0x7b, 0xea, 0x01, 0xd4, 0xb8, 0x88, 0xc4, 0x8e, 0xfb,
	0x55, 0xfd, 0x64, 0xb2, 0x23, 0x6e, 0xd4, 0x8e, 0xba, 0x31, 0x83, 0x6e, 0x29, 0xd8, 0xb8, 0x31,
	0x02, 0xef, 0x59, 0xe6, 0x52, 0x2b, 0x9a, 0x34, 0x67, 0x30, 0xd5, 0x8b, 0x9b, 0xaa, 0x31, 0x35,
	0x4e, 0x46, 0xf0, 0x4b, 0x3a, 0x28, 0xe8, 0x29, 0x67, 0xfe, 0x41, 0xcb, 0xbc, 0x1b, 0xc2, 0x52,
	0xa4, 0xb3, 0x2f, 0x92, 0x5c, 0x42, 0x73, 0xce, 0xd6, 0xfc, 0x04, 0x8f, 0x6a, 0x5b, 0xb1, 0x24,
	0x61, 0xaf, 0xda, 0xa3, 0x7a, 0x68, 0x32, 0x32, 0x04, 0x24, 0xdb, 0x70, 0x17, 0x50, 0xc2, 0xd6,
	0x86, 0x52, 0x85, 0xb3, 0x4f, 0x17, 0xd0, 0xcd, 0xc3, 0x1d, 0xbe, 0x82, 0x7a, 0xbe, 0x62, 0x3c,
	0x30, 0xf2, 0xad, 0xa3, 0x0b, 0x86, 0x07, 0xb8, 0x59, 0x61, 0x05, 0x5f, 0x43, 0xa3, 0xd8, 0x2c,
	0xce, 0xeb, 0xec, 0x7b, 0x08, 0xfc, 0xc3, 0x87, 0x82, 0x41, 0x0a, 0xc8, 0x5d, 0x2d, 0x04, 0x58,
	0x77, 0x51, 0x08, 0xb0, 0xed, 0x97, 0xed, 0x17, 0x50, 0xd5, 0x06, 0xe2, 0x7e, 0x29, 0xb2, 0xb0,
	0x3b, 0xf8, 0xfd, 0x13, 0x2c, 0xba, 0xfe, 0x83, 0xa7, 0xdc, 0xc4, 0x38, 0x27, 0x2e, 0xad, 0x0d,
	0xa0, 0xc4, 0x48, 0xe5, 0xcc, 0x59, 0xd4, 0xf4, 0x3f, 0x79, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff,
	0x11, 0x95, 0x0c, 0x9e, 0xa0, 0x03, 0x00, 0x00,
}
