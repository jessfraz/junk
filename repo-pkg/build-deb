#!/bin/bash
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DEST=${DIR}/bundles/build-deb
REPO=$1

source ${DIR}/.helper

# Print a usage message and exit.
usage() {
	cat >&2 <<-EOF
	To run, I need:
	- to be passed a git repo to build the deb packages from;

	./build-deb https://github.com/Yubico/yubico-piv-tool-dpkg.git
	EOF
	exit 1
}

[ "$REPO" ] || usage

(
repo_dir=$(get_repo $REPO)
VERSION=1.1.2
tilde='~' # ouch Bash 4.2 vs 4.3, you keel me
debVersion="${VERSION//-/$tilde}" # using \~ or '~' here works in 4.3, but not 4.2; just ~ causes $HOME to be inserted, hence the $tilde
debDate="$(date --rfc-2822)"
debSource="$(awk -F ': ' '$1 == "Source" { print $2; exit }' .build/${repo_dir}/debian/control)"
debMaintainer="$(awk -F ': ' '$1 == "Maintainer" { print $2; exit }' .build/${repo_dir}/debian/control)"

for version in $(targets_from master deb); do
	from="$(awk 'toupper($1) == "FROM" { print $2; exit }' "${DIR}/.docker/contrib/builder/deb/${version}/Dockerfile")"
	suite="${version##*-}"

	debbuilder="gbp buildpackage"
	if [[ "$version" == "debian-wheezy" ]] || [[ "$version" == "ubuntu-precise" ]]; then
		debbuilder="git-buildpackage"
	fi

	mkdir -p "$DEST/$version"
	kernel=$(uname -r)
	cat > "$DEST/$version/Dockerfile.build" <<-EOF
	FROM $from
	RUN apt-get update && apt-get install -y \
		build-essential \
		debhelper \
		devscripts \
		equivs \
		fakeroot \
		git-buildpackage \
		pristine-tar \
		--no-install-recommends
	COPY .build/${repo_dir} /usr/src/${repo_dir}
	WORKDIR /usr/src/${repo_dir}
	RUN apt-get update && mk-build-deps \
		-irt'apt-get --no-install-recommends -yq' \
		debian/control
	RUN { echo '$debSource (${debVersion}-0~${suite}) $suite; urgency=low'; echo; echo '  * Version: $VERSION'; echo; echo " -- $debMaintainer  $debDate"; } > debian/changelog && cat >&2 debian/changelog
	RUN rm -rf debian/source
	RUN dpkg-buildpackage -uc -us
	EOF
	tempImage="docker-temp/build-deb:$version"
	( set -x && docker build -t "$tempImage" -f "$DEST/$version/Dockerfile.build" . )
	docker run --rm "$tempImage" bash -c 'cd .. && tar -c *_*' | tar -xvC "$DEST/$version"
	docker rmi "$tempImage"
done

cleanup
)
