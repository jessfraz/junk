#!/bin/bash
set -e

# This script creates the apt repos for the .deb files generated by build-deb
#
# The following can then be used as apt sources:
# 	deb http://apt.dockerproject.org/repo $distro-$release $version
#
# For example:
#	deb http://apt.dockerproject.org/repo ubuntu-trusy main
#	deb http://apt.dockerproject.org/repo ubuntu-vivid testing
#	deb http://apt.dockerproject.org/repo debian-wheezy experimental
#	deb http://apt.dockerproject.org/repo debian-jessie main
#
# ... and so on and so forth for the builds created by build-deb

: ${DOCKER_RELEASE_DIR:=$DEST}
: ${GPG_KEYID:=releasedocker}
APTDIR=$DOCKER_RELEASE_DIR/apt/repo
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PKG=$1

source ${DIR}/.helper

# Print a usage message and exit.
usage() {
	cat >&2 <<-EOF
	To run, I need:
	- to be passed the name of the deb package to release;

	./release-deb yubico-piv-tool experimental
	EOF
	exit 1
}

[ "$PKG" ] || usage

# supported arches/sections
arches=( amd64 i386 )
components=( main testing experimental )

# set the component for the version being released
component=$2
if [[ -z "$component" ]]; then
	component=main
fi

# release the debs
for version in $(targets_from master deb); do
	codename="${version//debootstrap-}"

	DEBFILE=( "bundles/build-deb/$version/"*.deb )

	# if we have a $GPG_PASSPHRASE we may as well
	# dpkg-sign before copying the deb into the pool
	if [ ! -z "$GPG_PASSPHRASE" ]; then
		dpkg-sig -g "--passphrase $GPG_PASSPHRASE" \
			-k "$GPG_KEYID" --sign builder "${DEBFILE[@]}"
	fi

	# add the deb for each component for the distro version into the pool
	for deb in "${DEBFILE[@]}"; do
		debname=$(basename "$deb")
		pool_dir="$APTDIR/pool/$component/${debname:0:1}/${PKG}"
		mkdir -p "$pool_dir"
		cp "${deb}" "${pool_dir}/"
	done

	# update the filelist for this codename/component
	find "$APTDIR/pool/$component" \
		-name *~${codename#*-}*.deb > "$APTDIR/dists/$codename/$component/filelist"
done

# clean the databases
apt-ftparchive clean "$APTDIR/conf/apt-ftparchive.conf"

# run the apt-ftparchive commands so we can have pinning
apt-ftparchive generate "$APTDIR/conf/apt-ftparchive.conf"

for version in $(targets_from master deb); do
	codename="${version//debootstrap-}"

	apt-ftparchive \
		-o "APT::FTPArchive::Release::Codename=$codename" \
		-o "APT::FTPArchive::Release::Suite=$codename" \
		-c "$APTDIR/conf/docker-engine-release.conf" \
		release \
		"$APTDIR/dists/$codename" > "$APTDIR/dists/$codename/Release"

	for arch in "${arches[@]}"; do
		apt-ftparchive \
			-o "APT::FTPArchive::Release::Codename=$codename" \
			-o "APT::FTPArchive::Release::Suite=$codename" \
			-o "APT::FTPArchive::Release::Component=$component" \
			-o "APT::FTPArchive::Release::Architecture=$arch" \
			-c "$APTDIR/conf/docker-engine-release.conf" \
			release \
			"$APTDIR/dists/$codename/$component/binary-$arch" > "$APTDIR/dists/$codename/$component/binary-$arch/Release"
	done
done
